class Solution(object):
    
    def threeSum(self, nums):

        nums.sort()

        solutions = []
        
        for i in range(len(nums)-2):
            
            if i > 0 and nums[i] == nums[i-1]:
                continue
            
            j = i+1
            k = len(nums)-1
            
            while (j<k):

                sum = nums[i] + nums[j] + nums[k]
                
                if   (sum < 0): j += 1
                elif (sum > 0): k -= 1
                else: # sum == 0

                    solutions.append([nums[i], nums[j], nums[k]])
                    
                    while j < k and nums[j] == nums[j+1]:
                        j += 1
                    while j < k and nums[k] == nums[k-1]:
                        k -= 1
                        
                    j += 1
                    k -= 1

        return solutions
        
        '''
        brute-force : won't work for last 4 cases : exceeds the time complexity
        nums.sort()
        solutions = []
        for i in range(len(nums)-2):
            for j in range(i+1, len(nums)-1):
                for k in range(j+1, len(nums)):
                    if (i!=j and i!=k and j!=k):
                        if (nums[i]+nums[j]+nums[k] == 0):
                            if sorted([nums[i],nums[j],nums[k]]) not in solutions:
                                solutions.append(sorted([nums[i], nums[j], nums[k]]))
        return solutions

        '''
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        